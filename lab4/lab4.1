import java.util.Arrays;
import java.util.Random;

class Element {
    private int value;

    public Element(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return Integer.toString(value);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Element element = (Element) obj;
        return value == element.value;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(value);
    }
}

class Array {
    protected Element[] elements;

    public Array(int size) {
        this.elements = new Element[size];
        Random random = new Random();

        for (int i = 0; i < size; i++) {
            elements[i] = new Element(random.nextInt(100));
        }
    }

    public Element[] getElements() {
        return elements;
    }

    public void printArray() {
        System.out.println(Arrays.toString(elements));
    }

    public void addArray(Array otherArray) {
        for (int i = 0; i < elements.length; i++) {
            elements[i].setValue(elements[i].getValue() + otherArray.getElements()[i].getValue());
        }
    }

    public void subtractArray(Array otherArray) {
        for (int i = 0; i < elements.length; i++) {
            elements[i].setValue(elements[i].getValue() - otherArray.getElements()[i].getValue());
        }
    }

    public void multiplyArray(int multiplier) {
        for (Element element : elements) {
            element.setValue(element.getValue() * multiplier);
        }
    }

    @Override
    public String toString() {
        return Arrays.toString(elements);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Array array = (Array) obj;
        return Arrays.equals(elements, array.elements);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(elements);
    }
}

class OneDimensionalArray extends Array {
    public OneDimensionalArray(int size) {
        super(size);
    }

    // Перевизначені методи
    public void addArray(OneDimensionalArray otherArray) {
        super.addArray(otherArray);
    }

    public void multiplyArray(int multiplier) {
        super.multiplyArray(multiplier);
    }
}

public class Main {
    public static void main(String[] args) {
        OneDimensionalArray oneDimensionalArray1 = new OneDimensionalArray(5);
        OneDimensionalArray oneDimensionalArray2 = new OneDimensionalArray(5);

        System.out.println("Initial arrays:");
        oneDimensionalArray1.printArray();
        oneDimensionalArray2.printArray();

        oneDimensionalArray1.addArray(oneDimensionalArray2);
        System.out.println("Array after addition:");
        oneDimensionalArray1.printArray();

        oneDimensionalArray1.multiplyArray(2);
        System.out.println("Array after multiplication by 2:");
        oneDimensionalArray1.printArray();
    }
}
