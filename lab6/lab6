// Інтерфейс Видання
interface Publication {
    void publish();
}

// Абстрактний клас Книга
abstract class Book implements Publication {
    private String title;
    private String author;

    public Book(String title, String author) {
        this.title = title;
        this.author = author;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    @Override
    public void publish() {
        System.out.println("Book: " + title + " by " + author);
    }
}

// Клас Довідник, який успадковується від Книги
class Handbook extends Book {
    private String topic;

    public Handbook(String title, String author, String topic) {
        super(title, author);
        this.topic = topic;
    }

    public String getTopic() {
        return topic;
    }

    @Override
    public void publish() {
        System.out.println("Handbook: " + getTitle() + " (" + topic + ") by " + getAuthor());
    }
}

// Клас Енциклопедія, який успадковується від Книги
class Encyclopedia extends Book {
    private String field;

    public Encyclopedia(String title, String author, String field) {
        super(title, author);
        this.field = field;
    }

    public String getField() {
        return field;
    }

    @Override
    public void publish() {
        System.out.println("Encyclopedia: " + getTitle() + " (" + field + ") by " + getAuthor());
    }
}

public class Main {
    public static void main(String[] args) {
        // Приклад використання поліморфізму
        Publication handbook = new Handbook("Java Handbook", "John Doe", "Programming");
        Publication encyclopedia = new Encyclopedia("Science Encyclopedia", "Jane Smith", "Science");

        // Виклик методу publish для об'єктів різних класів, які реалізують інтерфейс Publication
        handbook.publish();
        encyclopedia.publish();
    }
}
